---
title: "07_analysis_3"
format:
  html:
    embed-resources: true
editor: visual
output-dir: "../results/07_analysis_3.html"
---

## Load Libraries

```{r}
#| message: false
library("tidyverse")
library("dplyr")
library("patchwork")
library("broom")
library("here")
library("ggrepel")
source("99_proj_func.R")
```

## Load data

```{r}
mbc_log2_transformed <- read_csv(here("data/03_dat_aug_02.csv"))
```

## Analysis

#### Nest data

```{r}
mbc_log2_transformed_nested <- mbc_log2_transformed |> # define new tbl
  group_by(gene) |> # group by name
  nest() # nest data by each gene

# view nested data
mbc_log2_transformed_nested
```

### Fitting linear models for log2-transformed values by treatment

```{r}
mbc_log2_transformed_nested <- mbc_log2_transformed_nested |> 
  mutate(model_object = map( # add a model_object column
    .x = data, # use data column as input
    .f = ~lm(formula = log2_count_value ~ bin_treatment, # model log2 transformed values based on treatment
             data = .x)))

# view new nested data with lm results
mbc_log2_transformed_nested
```

### Tidying linear model results with confidence intervals

```{r}
mbc_log2_transformed_nested <- mbc_log2_transformed_nested |> 
  mutate(model_object_tidy = map( # add a tidy model_object column
    .x = model_object,
    .f = ~tidy(x = .x,
               conf.int = TRUE,
               conf.level = 0.95)))
# view new nested data with tidy lm results
mbc_log2_transformed_nested
```

### Unnesting tidy linear model results

```{r}
estimates <- mbc_log2_transformed_nested |> 
  unnest(model_object_tidy) # unnest nested tbl
estimates
```

### Filtering and selecting treatment effects from linear model estimates

```{r}
estimates <- estimates |> 
  filter(term == "bin_treatment") |> # choose only "treatment"
  select(gene, # select variables of interest
         p.value, 
         estimate, 
         conf.low, 
         conf.high) |> 
  ungroup() # ungroup tbl

# view result
estimates
```

### Forest plot of q-values

```{r}
q_value_estimates <- estimates |> 
  mutate(q.value = p.adjust(p.value)) |> # add adjusted p-values
  filter(q.value < 0.05) # filter for all q-values below 0,05

if (nrow(q_value_estimates) > 0) { # if: there are any q-values below below 0,05, make plot
  q_value_estimates_plot <- q_value_estimates |> 
    ggplot(aes(x = estimate, # set x as estimate 
               y = fct_reorder(gene, # set y as gene 
                               estimate))) +
    geom_point() +
    geom_errorbarh(aes(xmax = conf.low, xmin = conf.high)) +
    theme_minimal(base_size = 8) +
    geom_vline(xintercept = 0, linetype = "solid", color = "black") +
    labs(
    title = "Significant Immune-Related Genes in Premenopausal ER+/HER2− \nAdvanced Breast Cancer",
    x = "Estimates (95% Confidence Intervals)",
    y = "Gene",
    caption = "Genes identified as significant (by q-value) after treatment with \npembrolizumab, exemestane, and leuprolide."
  ) +
    theme(plot.title.position = "plot")
  ggsave(here("results/forest_plot_q_value.png"), 
         plot = q_value_estimates_plot, 
         width = 10, 
         height = 6) 
} else { # else: explain why not
  print("There are no q-values below 0.05")
}
  
```

### Forest plot

```{r}
estimates <- estimates |> 
  mutate(p_significance = case_when(
                                    p.value < 0.05  ~ "yes", # annotate p-value below 0,05 to "yes"
                                    p.value > 0.05 ~ "no"))  # annotate p-value above 0,05 to "no"
p_value_estimates_plot <- estimates |> 
  filter(p_significance == "yes") |> # filter out insignificant genes
  ggplot(aes(x = estimate, # set x as estimate 
             y = fct_reorder(gene, # set y as gene 
                             estimate))) +
  geom_point() +
  geom_errorbarh(aes(xmax = conf.low, 
                     xmin = conf.high)) +
  theme_grey(base_size = 8) +
  geom_vline(xintercept = 0, 
             linetype = "solid", 
             color = "black") +
  labs(
  title = "Significant Immune-Related Genes in Premenopausal \nER+/HER2− Advanced Breast Cancer",
  x = "Estimates (95% Confidence Intervals)",
  y = "Gene",
  caption = "Genes identified as significant by non-adjusted p-value after treatment with \npembrolizumab, exemestane, and leuprolide."
) +
  theme(plot.title.position = "plot")

# save plot
ggsave(here("results/07_forest_plot_p_value.png"), 
         plot = p_value_estimates_plot, 
         width = 10, 
         height = 6)
```

#### Volcano plot

```{r}
estimates <- estimates |> 
  mutate(log_of_p = (-log10(p.value))) # create a new column with -10log10(p)

volcano_plot <- estimates |> 
  ggplot(aes(x = estimate, # plot results
             y = log_of_p)) + 
  geom_point(alpha = 0.05) + # add semi-transparancy 
  geom_point(data = estimates |> # highlight signifanct genes in turquoise 
              filter(p_significance == "yes"), 
              color = "turquoise", 
              alpha = 0.6) +
  geom_point(data = estimates |> # dye insignifanct genes red 
             filter(p_significance == "no"), 
             color = "tomato", 
             alpha = 0.3) +
  geom_text_repel(data = estimates |> # label significant points with gene name
                  filter(p_significance == "yes"), 
                  aes(label = gene), 
                  size = 2, 
                  color = "turquoise", 
                  max.overlaps = 50) +
  theme_grey(base_size = 8) +
  geom_hline(yintercept = 0, linetype = "solid", color = "black") +
  labs(
  title = "Immune Microenvironment in Response to Pembrolizumab, Exemestane, and Leuprolide \nin Premenopausal ER+/HER2− Advanced Breast Cancer",
  subtitle = "Significantly expressed genes (by non-adjusted p-values, highlighted in turquoise) \nafter treatment with pembrolizumab, exemestane, and leuprolide \nin pre- and post-treatment samples",
  x = "Estimates",
  y = "-log10(p-value)"
) +
  theme(plot.title.position = "plot")

# save plot
ggsave(here("results/07_volcano_plot_of_signifcantly_expressed_genes.png"),
       plot = volcano_plot,
       width = 8, 
       height = 5.5)
```

## Analysis

```{r}
significant_gene_list <- estimates |>  # create a list of significant genes 
  arrange(p.value) |> # arrange based on ascending p-value
  slice(1:4) |> # extract the first 4 rows
  pull(gene) # extract the gene names

# four different plots showing the difference in expression before and after treatment.
# chose four genes with highest significant p-value
p1 <- significant_gene(mbc_log2_transformed, significant_gene_list[1])
p2 <- significant_gene(mbc_log2_transformed, significant_gene_list[2])
p3 <- significant_gene(mbc_log2_transformed, significant_gene_list[3])
p4 <- significant_gene(mbc_log2_transformed, significant_gene_list[4])

# combine the four plots to one plot
gene_ekspression_before_and_after_treatment_4_genes <- (p1 + p2 + p3 + p4) +
  plot_annotation(title = "Gene Expression before and after treatment",
                  subtitle = str_interp("Comparing ${significant_gene_list[1]}, ${significant_gene_list[2]}, ${significant_gene_list[3]} and ${significant_gene_list[4]}")) +
  theme(plot.title.position = "plot") # move title of the combined plot to the very left

gene_ekspression_before_and_after_treatment_4_genes
# save plot
ggsave(here("results/07_gene_ekspression_before_and_after_treatment_4_genes.png"), 
       plot = gene_ekspression_before_and_after_treatment_4_genes, 
       width = 10, 
       height = 6)

```
