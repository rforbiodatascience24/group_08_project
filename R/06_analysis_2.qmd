---
title: "06_analysis_2"
format: html
editor: visual
---

## Load Libraries

```{r}
library(tidyverse)
library(broom)
library(here)
source("99_proj_func.R")
```

## Load data

```{r}
# load data
long_data <- read_csv(here("data/03_dat_aug_02.csv"))
# view data
print(long_data)
```

### Augment Data

```{r}
mbc_log2_transformed <- long_data |>
  mutate(log2_transformed = log2(count_value)) |> # calculate log2 of counts
  mutate(count_type = case_when(
                          str_detect(count_type, "^pre") ~ 0, # change "pre" to 0
                          str_detect(count_type, "^post") ~ 1)) |> # change "post" to 1
  relocate(treatment = count_type) # rename count_type to treatment 
mbc_log2_transformed
```

## Analysis (make linear models)

```{r}
mbc_log2_transformed_nested <- mbc_log2_transformed |> 
  group_by(name) |> # group by name
  nest() # nest data by each gene

# view nested data
mbc_log2_transformed_nested
```

```{r}
mbc_log2_transformed_nested <- mbc_log2_transformed_nested |> 
  mutate(model_object = map( # add new column 
    .x = data, # use data column as input
    .f = ~lm(formula = log2_transformed ~ treatment, # model log2 transformed values based on treatment
             data = .x)))

# view new nested data with lm results
mbc_log2_transformed_nested
```

```{r}
mbc_log2_transformed_nested |>
  filter(gene == "CCNO") |> # pick out gene to run analysis on
  pull(model_object) |> # extract model objects
  pluck(1) |> # select the first model object
  tidy(conf.int = TRUE, # convert results to tibble
       conf.level = 0.95)
```

### Make the variable model_object_tidy

```{r}
mbc_log2_transformed_nested <- mbc_log2_transformed_nested |> 
  mutate(model_object_tidy = map(
    .x = model_object,
    .f = ~tidy(x = .x,
               conf.int = TRUE,
               conf.level = 0.95)))
mbc_log2_transformed_nested
```

### Make the new tibble **`estimates`**

```{r}
estimates <- mbc_log2_transformed_nested |> 
  unnest(model_object_tidy) # unnest nested tbl
estimates
```

### only show slope, and ungroup

```{r}
estimates <- estimates |> 
  filter(term == "treatment") |> # choose only "treatment"
  select(gene, # select variables of interest
         p.value, 
         estimate, 
         conf.low, 
         conf.high) |> 
  ungroup() # ungroup tbl

# view result
estimates
```

adding q.value

```{r}
estimates <- estimates |> 
  mutate(q.value = p.adjust(p.value), # calculate q-values 
         p_significance = case_when(
                                    p.value < 0.05  ~ "yes", # annotate p-value below 0,05 to "yes"
                                    p.value > 0.05 ~ "no")) # annotate p-value above 0,05 to "no"

# view results
estimates
```

### Forest plot

```{r}

estimates |> 
  filter(p_significance == "yes") |> # filter out insignificant genes
  ggplot(aes(x = estimate, # set x as estimate 
             y = fct_reorder(gene, # set y as gene 
                             estimate))) +
  geom_point() +
  geom_errorbarh(aes(xmax = conf.low, xmin = conf.high)) +
  theme_minimal(base_size = 8) +
  geom_vline(xintercept = 0, linetype = "solid", color = "black") +
  labs(title = "Genes Associated with Early Metastasis in Small Node-Negative Breast Carcinoma",
       x = "Estimates (95%CIs)",
       y = "Gene",
       caption = "Data from DOI: 10.1002/gcc.20820") # add a caption
```

volcano plot

```{r}
estimates <- estimates |> 
  mutate(log_of_p = (-log10(p.value)))
#| fig-width: 8
#| fig-height: 5.5
#| dpi: 300
estimates |> 
  ggplot(aes(x = estimate, y = log_of_p)) +
  geom_point(alpha = 0.05) +
  geom_point(data = estimates |> filter(is_kindof_significant_p == "yes"), 
                        color = "turquoise", alpha = 0.6) +
  geom_point(data = estimates |> filter(is_kindof_significant_p == "no"), 
                        color = "tomato", alpha = 0.3) +
  geom_text_repel(data = estimates |> filter(is_kindof_significant_p == "yes"), 
                  aes(label = gene), size = 2, color = "turquoise", max.overlaps = 50) +
  theme_minimal(base_size = 10) +
  geom_hline(yintercept = 0, linetype = "solid", color = "black") +
  labs(title = "Genes Associated with Early Metastasis in Small Node-Negative Breast Carcinoma",
       subtitle = "Genes highlighted in turquoise were significant after multiple testing correction",
       x = "Estimates",
       y = "- log10( p-value )",
       caption = "Data from DOI: 10.1002/gcc.20820") +
  theme(plot.title.position = "plot")
```

### comparing slopes with log 2 fold in percent difference

```{r}
# comparing slopes with log 2 fold in percent difference
estimate_summary <- estimates |>
  arrange(gene) |> 
  summarise(estimate)
log2fold <- mbc_clean_aug_wide |> 
  arrange(name) |> 
  summarise(log2_fold_change)
# calculate  percent difference and rename the column
percent_difference <- estimate_summary |> 
  bind_cols(log2fold) |> 
  mutate(percent_difference = round((estimate - log2_fold_change) / log2_fold_change * 100, 2)) %>%
  select(percent_difference)

percent_difference


```
